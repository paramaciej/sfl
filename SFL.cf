token UIdent (upper (letter | digit | '_')*);

Prog.       Program ::= [Stmt];
ExpStmt.    Stmt ::= Exp;

TConstr.    TC ::= UIdent [TCArg];
TConstrS.   TC1 ::= UIdent;
TCAIdent.   TCArg ::= Ident;
TCAArg.     TCArg ::= TC1;
TypeDecl.   Stmt ::= "type" UIdent [Ident] "=" [TC];
coercions  TC 1;
separator   nonempty TC "|";
terminator  nonempty TCArg "";



ELam.       Exp ::= Ident "=>" FBody;
Function.   Stmt ::= "def" Ident Ident [Ident] "=" FBody;
FBodyMatch. FBody ::= MatchBody;
FBodyExp.   FBody ::= Exp;

Value.      Stmt ::= "val" Ident "=" Exp;

EMatch.      Exp ::= "match" Exp MatchBody;
MBody.      MatchBody ::= "{" [MatchCase] "}";
MCase.      MatchCase ::= "case" PatExp "=>" Exp;

EIf.        Exp ::= "if" Exp "then" Exp "else" Exp;
ELet.       Exp ::= "let" PatExp "=" Exp "in" Exp;
ELetRec.    Exp ::= "let" "rec" Ident "=" Exp "in" Exp;


PatInt.     Pat ::= Integer;
PatTrue.    Pat ::= "True";
PatFalse.   Pat ::= "False";
PatList.    Pat ::= "[" [PLEl] "]";
PatVar.     Pat ::= Ident;
PatTConstr. Pat ::= UIdent [PatExp];
PatWild.    Pat ::= "_";

PETuple.    PatExp ::= PatExp "," PatExp1;
PECons.     PatExp1 ::= PatExp2 ":" PatExp1;
PEPat.      PatExp2 ::= Pat;
coercions   PatExp 2;

PatLElem.       PLEl ::= PatExp1;
separator   PLEl ",";

terminator  PatExp "";

ETuple.     Exp ::= Exp1 "," [Exp1];
ECons.      Exp1 ::= Exp2 ":" Exp1;
EOr.        Exp2 ::= Exp2 "or" Exp3;
EAnd.       Exp3 ::= Exp3 "and" Exp4;
ENot.       Exp4 ::= "not" Exp5;
ELt.        Exp5 ::= Exp5 "<" Exp6;
ELte.       Exp5 ::= Exp5 "<=" Exp6;
EGt.        Exp5 ::= Exp5 ">" Exp6;
EGte.       Exp5 ::= Exp5 ">=" Exp6;
EEq.        Exp5 ::= Exp5 "==" Exp6;
ENEq.       Exp5 ::= Exp5 "/=" Exp6;
EAdd.       Exp6 ::= Exp6 "+" Exp7;
ESub.       Exp6 ::= Exp6 "-" Exp7;
EMul.       Exp7 ::= Exp7 "*" Exp8;
EDiv.       Exp7 ::= Exp7 "/" Exp8;
EMod.       Exp7 ::= Exp7 "%" Exp8;
EApp.       Exp8 ::= Exp8 [Exp9];
ELiteral.   Exp9 ::= Literal;
coercions   Exp 9;

LInt.       Literal ::= Integer;
LTrue.      Literal ::= "True";
LFalse.     Literal ::= "False";
LList.      Literal ::= "[" [LElem] "]";
LVar.       Literal ::= Ident;
LTConstr.   Literal ::= UIdent;


separator   nonempty Exp1 ",";

EListElem.  LElem ::= Exp1;
separator   LElem ",";

separator   Stmt ";";
separator   nonempty MatchCase ";";
terminator  Ident "";
terminator  Pat "";
terminator  nonempty Exp9 "";

comment     "#";