type Option a = Some a | None;

Some; # constructor with arguments is a function

def optHead xs = {
    case h:_ => Some h;
    case [] => None
};

optHead [1,2,3];
optHead [];


def get x = let Some y = x in y;

get (Some 42);
get (Some (Some None));

get None; # runtime error -- wrong mathing in let


# Either

type Either a b = Left a | Right b;

Left 42;
Right [1,2,3];

def fun x = {
    case Right y => Some y;
    case Left _ => None
};

fun (Left 42);
fun (Right 42);


# Tree

type Tree a = Node (Tree a) a (Tree a) | Leaf;

Leaf;
Node Leaf 42 Leaf;
Node (Node Leaf 1 Leaf) 2 (Node Leaf 3 Leaf);


def insert tree x = match tree {
    case Leaf => Node Leaf x Leaf;
    case (Node left v right) => if x < v
        then Node (insert left x) v right
        else Node left v (insert right x)
};

insert Leaf 5;
insert (Node Leaf 3 Leaf) 7;
insert (insert (insert Leaf 2) 1) 5;

def treeFromList x = {
    case [] => Leaf;
    case h:t => insert (treeFromList t) h
};

def concat x y = match x {
    case [] => y;
    case h:t => h : concat t y
};

def listFromTree x = {
    case Leaf => [];
    case (Node left v right) => concat (listFromTree left) (v : (listFromTree right))
};

val tree = treeFromList [5,7,6,1,3,2,4];

listFromTree tree;


def mapTree fun tree = match tree {
    case Leaf => Leaf;
    case Node left v right => Node (mapTree fun left) (fun v) (mapTree fun right)
};

mapTree (x => x % 2 == 0, x / 2) tree;

val functionTree = mapTree (x => (y => y + x)) tree;

mapTree (x => x 100) functionTree;
